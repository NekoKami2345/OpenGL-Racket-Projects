#lang racket

(require racket/gui)
(require opengl)
(require opengl/util)
(require ffi/vector)

(define list-vertices (list .25 .25 0.0 .75 .25 0.0 .75 .75 0.0))
(define size 9)

(define (resize w h)
  (glViewport 0 0 w h)
  ;#t
  )
(define my-canvas%
  (class* canvas% ()
    (inherit with-gl-context swap-gl-buffers)

    (define vao 0)
    (define vbo 0)
    
    (define/override (on-paint)
      (with-gl-context
          (lambda ()
            (glBindVertexArray(u32vector-ref vao 0))
            (glBindBuffer GL_ARRAY_BUFFER (u32vector-ref vbo 0))
            (glBufferData GL_ARRAY_BUFFER 9 (list->f32vector list-vertices) GL_STATIC_DRAW)
            (glEnableVertexAttribArray 0)
            (glVertexAttribPointer 0 3 GL_FLOAT #f 0 0)
            (glDrawArrays GL_TRIANGLES 0 3)
            (swap-gl-buffers)
            )
        )
      )
    (define/override (on-size width height)
      (with-gl-context
          (lambda ()
            (resize width height)
            )
        )
      )
    (define/public (genVAO)
      (with-gl-context
          (lambda ()
            (set! vao (glGenVertexArrays 1))
            )))
    (define/public writeVAO
      (lambda ()
        (write (u32vector-ref vao 0))))
    (define/public (genVBO)
      (with-gl-context
          (lambda ()
            (set! vbo (glGenBuffers 1))
            )))
    (define/public (writeVBO)
        (write (u32vector-ref vbo 0)))
    (super-instantiate () (style '(gl)))
    
    ;(with-gl-context
    ;    (lambda ()
    ;      (define x (glGenVertexArrays 1))
    ;      (write (u32vector-ref x 0))
    ;      (define y (glGenBuffers 1))
    ;      (glBindVertexArray(u32vector-ref x 0))
    ;      (glBindBuffer GL_ARRAY_BUFFER (u32vector-ref y 0))
    ;      (glBufferData GL_ARRAY_BUFFER size (list->f32vector list-vertices) GL_STATIC_DRAW)
    ;      (glEnableVertexAttribArray 0)
    ;      (glVertexAttribPointer 0 3 GL_FLOAT #f 0 0)))
          
    )
  )
(define win (new frame% (label "OpenGL Test") (min-width 1200) (min-height 900)))
(define gl (new my-canvas% (parent win)))

(send win show #t)

(send gl genVAO)
(send gl writeVAO)
(send gl genVBO)
(send gl writeVBO)
;(write (u32vector-ref vao 0))